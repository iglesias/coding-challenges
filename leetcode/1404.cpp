#include <string>

#include <gtest/gtest.h>

int solve(std::string s)
{
    int l = 0, r = static_cast<int>(s.length()) - 1;
    int ans = 0;
    while (l < r) {
        ans++;
        if (s[r] == '0') {
            r--;
        } else {
            int i = r;
            do {
                s[i] = '0';
                i--;
            } while (i >= 0 and s[i] == '1');
            if (i < 0) {
                s.insert(0, "1");
                r++;
            } else s[i] = '1';
        }
    }
    return s[l] == '1' ? ans : ans + 1;
}

TEST(num_steps, FiveHundredChars)
{
  const std::string s{};
  EXPECT_EQ(solve(s), 626);
}

int main(int argc, char **argv)
{
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
